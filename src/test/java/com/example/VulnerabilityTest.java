package com.example;

import com.example.util.SerializationUtil;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.http.ResponseEntity;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
public class VulnerabilityTest {

    @LocalServerPort
    private int port;

    private TestRestTemplate restTemplate = new TestRestTemplate();

    @Test
    public void testSafeDeserialization() throws Exception {
        String safePayload = SerializationUtil.createSafePayload("Hello World");
        
        ResponseEntity<String> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/deserialize",
            safePayload,
            String.class
        );
        
        assertTrue(response.getStatusCode().is2xxSuccessful());
        assertTrue(response.getBody().contains("Hello World"));
    }

    @Test
    public void testExploitDeserialization() throws Exception {
        String exploitPayload = SerializationUtil.createExploitPayload("echo vulnerable");
        
        ResponseEntity<String> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/deserialize",
            exploitPayload,
            String.class
        );
        
        assertTrue(response.getStatusCode().is2xxSuccessful());
        assertTrue(response.getBody().contains("EXEC:echo vulnerable"));
    }

    @Test
    public void testInvalidPayload() {
        String invalidPayload = "invalid-base64-data";
        
        ResponseEntity<String> response = restTemplate.postForEntity(
            "http://localhost:" + port + "/api/deserialize",
            invalidPayload,
            String.class
        );
        
        assertTrue(response.getStatusCode().is4xxClientError());
    }
} 